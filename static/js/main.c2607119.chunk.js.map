{"version":3,"sources":["services/PointService.js","components/Annotator.js","components/ColorPicker.js","components/addInfoPoint.js","index.js"],"names":["PointService","loadPoints","filename","infoPoints","Promise","resolve","reject","fetch","process","catch","err","then","response","json","data","console","log","savePoints","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","addInfoPoint","info","point","infopoint","descrizione","colore","titolo","myInstance","this","camera","controls","scene","renderer","pointcloud","ButtonExample","state","displayColorPicker","background","handleClick","setState","handleClose","handleChange","color","hex","handleChangeComplete","props","changeColor","style","backgroundColor","onClick","position","zIndex","top","right","bottom","left","onChange","onChangeComplete","React","Component","layout","labelCol","span","wrapperCol","tailLayout","offset","App","formRef","createRef","value","current","setFieldsValue","onFinish","values","handleOk","onFinishFailed","errorInfo","onMouseMove","e","stopPropagation","title","visible","footer","onCancel","handleCancel","x","toString","substring","name","initialValues","remember","ref","Item","label","rules","required","message","ColorPicker","TextArea","htmlType","Option","Select","pointService","getInstance","raycaster","THREE","params","Points","threshold","pointclouds","mouse","clock","toggle","sphereKps","sphereGeometry","sphereMaterial","sphere","scale","set","Annotator","init","$","hide","width","innerWidth","height","innerHeight","antialias","setPixelRatio","devicePixelRatio","setSize","dofAutofocus","mount","domElement","up","intrinsic","cameraMatrix2npString","projectionMatrix","extrinsic","matrixWorldInverse","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","addPointcloud","addSphereInfo","axesHelper","add","cameraMatrix","npString","i","j","pos","elements","toFixed","PCDLoader","load","frame","points","r","geometry","boundingSphere","radius","xhr","loaded","round","total","removePointcloud","remove","removeSphereKps","forEach","pair","object","getObjectByProperty","uuid","dispose","material","renderLists","infopoints","Object","keys","dist","distanceTo","sphereKpGeometry","sphereKpMaterial","sphereKp","copy","push","animate","requestAnimationFrame","update","renderScene","updateMatrixWorld","setFromCamera","intersections","intersectObjects","intersection","length","getDelta","render","preventDefault","clientX","clientWidth","y","clientY","clientHeight","onMouseClick","shiftKey","showModal","onWindowResize","aspect","updateProjectionMatrix","scaleDown","getObjectByName","size","needsUpdate","scaleUp","onFrameUpdate","selectedPoint","ip","found","impostazioniJson","headers","Accept","filenames","addEventListener","removeEventListener","PlusOutlined","MinusOutlined","direction","Text","z","flex","fontSize","defaultValue","map","fid","key","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c2607119.chunk.js","sourcesContent":["class PointService {\n  static myInstance = null;\n  static getInstance() {\n    if (PointService.myInstance == null) {\n      PointService.myInstance = new PointService();\n    }\n    return this.myInstance;\n  }\n\n  loadPoints = (filename) => {\n    delete this.infoPoints;\n    this.infoPoints = {};\n\n    return new Promise((resolve, reject) => {\n      fetch(process.env.PUBLIC_URL + '/assets/infopoints/' + filename + '.json')\n        .catch((err) => reject(err))\n        .then((response) => response.json())\n        .then((data) => {\n          this.infoPoints = data;\n          console.log(this.infoPoints);\n          resolve(this.infoPoints);\n        });\n    });\n  };\n\n  savePoints = (filename) => {\n    if (!this.infoPoints) {\n      return;\n    }\n    let contentType = 'application/json;charset=utf-8;';\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob(\n        [decodeURIComponent(encodeURI(JSON.stringify(this.infoPoints)))],\n        { type: contentType }\n      );\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement('a');\n      a.download = filename;\n      a.href =\n        'data:' +\n        contentType +\n        ',' +\n        encodeURIComponent(JSON.stringify(this.infoPoints));\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  // infoPoints\n  addInfoPoint = (info, point) => {\n    const infopoint = {\n      descrizione: info.descrizione,\n      colore: info.colore || '#ffffff',\n      point,\n    };\n    this.infoPoints[info.titolo] = infopoint;\n    return infopoint;\n  };\n}\n\nexport default PointService;\n","import React, { Component } from 'react';\n\nimport * as THREE from 'three';\nimport { PCDLoader } from 'three/examples/jsm/loaders/PCDLoader.js';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport $ from 'jquery';\n\nimport PointService from '../services/PointService';\n\nimport AddInfoPoint from './addInfoPoint';\n\nimport { Row, Col, Button, Select, Typography, Space } from 'antd';\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\nlet pointService = PointService.getInstance();\n\nvar camera, controls, scene, renderer, loader, pointcloud;\n\nvar raycaster = new THREE.Raycaster();\nraycaster.params.Points.threshold = 0.01;\nvar mouse = new THREE.Vector2();\n\nvar pointclouds;\n\nvar clock = new THREE.Clock();\nvar toggle = 0;\n\nvar sphereKps = []; // array of {uuid, titolo}\n\nvar sphereGeometry = new THREE.SphereBufferGeometry(0.04, 32, 32);\nvar sphereMaterial = new THREE.MeshBasicMaterial({ color: '#FF0000' });\nvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\nsphere.scale.set(1, 1, 1);\n\nconst frameFolder = process.env.PUBLIC_URL + '/assets/pointclouds/';\n\nclass Annotator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: false,\n      loaded: 0,\n      intrinsic: 0,\n      extrinsic: 0,\n      point: [],\n      selectedPoint: [],\n      impostazioniJson: null,\n      frame: '',\n    };\n\n    fetch('assets/impostazioni.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((r) => r.json())\n      .then((impostazioniJson) => {\n        this.setState({\n          impostazioniJson,\n          frame: impostazioniJson.filenames[0],\n        });\n        this.init();\n        this.animate();\n      });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onWindowResize, false);\n    window.addEventListener('mousemove', this.onMouseMove, false);\n    window.addEventListener('click', this.onMouseClick, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize');\n    window.removeEventListener('mousemove');\n    window.removeEventListener('click');\n  }\n\n  init = () => {\n    $('.alert-success').hide();\n\n    const width = 0.75 * window.innerWidth;\n    const height = 0.85 * window.innerHeight;\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x008000);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n    renderer.dofAutofocus = true;\n    this.mount.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(65, width / height, 1, 1000);\n    // camera = new THREE.OrthographicCamera( 5, -5, 3, 0, 1, 1000 );\n    camera.position.set(8, 4, 8);\n    camera.up.set(0, 1, 0);\n\n    this.setState({\n      intrinsic: this.cameraMatrix2npString(camera.projectionMatrix),\n      extrinsic: this.cameraMatrix2npString(camera.matrixWorldInverse),\n    });\n\n    // controls\n\n    controls = new MapControls(camera, renderer.domElement);\n\n    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n\n    controls.enableDamping = false; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.05;\n\n    controls.screenSpacePanning = false;\n\n    controls.minDistance = 1;\n    controls.maxDistance = 500;\n\n    controls.maxPolarAngle = 2 * Math.PI;\n\n    // point cloud\n    this.addPointcloud();\n    this.addSphereInfo();\n\n    // axis\n    var axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    // sphere\n    scene.add(sphere);\n  };\n\n  cameraMatrix2npString = (cameraMatrix) => {\n    var npString = 'np.array([';\n    for (var i = 0; i < 4; i++) {\n      npString += '[';\n      for (var j = 0; j < 4; j++) {\n        var pos = i * 4 + j;\n        npString +=\n          cameraMatrix.elements[pos] === 0\n            ? cameraMatrix.elements[pos]\n            : cameraMatrix.elements[pos].toFixed(4);\n        if (j !== 3) {\n          npString += ', ';\n        }\n      }\n      npString += ']';\n      if (i !== 3) {\n        npString += ', ';\n      }\n    }\n    npString += '])';\n    return npString;\n  };\n\n  addPointcloud = () => {\n    pointcloud = new THREE.Points(new THREE.Geometry(), new THREE.Material());\n    loader = new PCDLoader();\n    loader.load(\n      frameFolder + this.state.frame + '.pcd',\n      (points) => {\n        pointcloud = points;\n        // if (points.material.color.r !== 1) {\n        //   points.material.color.setHex(0x000000);\n        // }\n        // points.material.size = 0.02;\n        scene.add(pointcloud);\n        pointclouds = [pointcloud];\n        const r = pointcloud.geometry.boundingSphere.radius;\n        camera.position.set(r * 1.5, r * 0.5, r * 1.5);\n      },\n      (xhr) => {\n        this.setState({\n          loaded: Math.round((xhr.loaded / xhr.total) * 100),\n        });\n      }\n    );\n  };\n\n  removePointcloud = () => {\n    scene.remove(pointcloud);\n  };\n\n  removeSphereKps = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      object.geometry.dispose();\n      object.material.dispose();\n      scene.remove(object);\n    });\n    renderer.renderLists.dispose();\n    sphereKps = [];\n  };\n\n  addSphereInfo = () => {\n    pointService\n      .loadPoints(this.state.frame)\n      .catch((err) => {\n        console.log(err);\n      })\n      .then((infopoints) => {\n        Object.keys(infopoints).forEach((titolo) => {\n          const dist = camera.position.distanceTo(infopoints[titolo].point);\n          const sphereKpGeometry = new THREE.SphereBufferGeometry(\n            dist / 32,\n            32,\n            32\n          );\n          const sphereKpMaterial = new THREE.MeshBasicMaterial({\n            color: infopoints[titolo].colore,\n          });\n          const sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n          sphereKp.position.copy(infopoints[titolo].point);\n          sphereKps.push({\n            uuid: sphereKp.uuid,\n            titolo: titolo,\n          });\n          scene.add(sphereKp);\n        });\n      });\n  };\n\n  animate = () => {\n    this.setState({\n      intrinsic: this.cameraMatrix2npString(camera.projectionMatrix),\n      extrinsic: this.cameraMatrix2npString(camera.matrixWorldInverse),\n    });\n    requestAnimationFrame(this.animate);\n    controls.update();\n    this.renderScene();\n  };\n\n  renderScene = () => {\n    camera.updateMatrixWorld();\n\n    // update the picking ray with the camera and mouse position\n    raycaster.setFromCamera(mouse, camera);\n\n    // calculate objects intersecting the picking ray\n    if (typeof pointclouds !== 'undefined') {\n      var intersections = raycaster.intersectObjects(pointclouds);\n      var intersection = intersections.length > 0 ? intersections[0] : null;\n      if (toggle > 0.02 && intersection != null) {\n        this.setState({\n          point: intersection.point,\n        });\n        sphere.position.copy(intersection.point);\n        toggle = 0;\n      }\n    }\n\n    toggle += clock.getDelta();\n\n    renderer.render(scene, camera);\n  };\n\n  onMouseMove = (e) => {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    e.preventDefault();\n    mouse.x = (e.clientX / this.mount.clientWidth) * 2 - 1;\n    mouse.y =\n      -((e.clientY - 0.1 * window.innerHeight) / this.mount.clientHeight) * 2 +\n      1;\n  };\n\n  onMouseClick = (e) => {\n    if (e.shiftKey && this.state.point.x) {\n      this.showModal(this.state.point);\n    }\n  };\n\n  onWindowResize = () => {\n    camera.aspect = (0.75 * window.innerWidth) / (0.85 * window.innerHeight);\n    camera.updateProjectionMatrix();\n    renderer.setSize(0.75 * window.innerWidth, 0.85 * window.innerHeight);\n  };\n\n  scaleDown = () => {\n    var points = scene.getObjectByName(this.state.frame + '.pcd');\n    points.material.size *= 0.8;\n    points.material.needsUpdate = true;\n  };\n  scaleUp = () => {\n    var points = scene.getObjectByName(this.state.frame + '.pcd');\n    points.material.size *= 1.2;\n    points.material.needsUpdate = true;\n  };\n\n  onFrameUpdate = (e) => {\n    if (e == this.state.frame) {\n      return;\n    }\n    this.state.frame = e;\n    this.removeSphereKps();\n    this.removePointcloud();\n    this.addPointcloud();\n    this.addSphereInfo();\n  };\n\n  //////// infopoint tool ///////\n  showModal = (point) => {\n    this.setState({\n      showModal: true,\n      selectedPoint: point,\n    });\n  };\n\n  // aggiungo un infopoint\n  handleOk = (e) => {\n    const ip = pointService.addInfoPoint(e, this.state.selectedPoint);\n\n    var found = false;\n    var sphereKp;\n    for (const pair of sphereKps) {\n      if (pair.titolo === e.titolo) {\n        sphereKp = scene.getObjectByProperty('uuid', pair.uuid);\n        sphereKp.position.copy(this.state.point);\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      var sphereKpGeometry = new THREE.SphereBufferGeometry(0.04, 32, 32);\n      var sphereKpMaterial = new THREE.MeshBasicMaterial({\n        color: ip.colore,\n      });\n      sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n      sphereKp.position.copy(ip.point);\n      sphereKps.push({\n        uuid: sphereKp.uuid,\n        titolo: e.titolo,\n      });\n      scene.add(sphereKp);\n    }\n\n    this.setState({\n      showModal: false,\n    });\n  };\n\n  handleCancel = (e) => {\n    this.setState({\n      showModal: false,\n    });\n  };\n  /////////////////\n\n  render() {\n    return (\n      <div>\n        <AddInfoPoint\n          handleCancel={this.handleCancel}\n          handleOk={this.handleOk}\n          visible={this.state.showModal}\n          point={this.state.selectedPoint}\n        ></AddInfoPoint>\n        <Row\n          style={{\n            height: '100vh',\n            width: '100vw',\n            backgroundColor: '#404040',\n          }}\n        >\n          <Col style={{ width: 0.75 * window.innerWidth }}>\n            <Row style={{ height: 0.1 * window.innerHeight }}>\n              <Button onClick={() => pointService.savePoints(this.state.frame)}>\n                Salva InfoPoint\n              </Button>\n              <Button onClick={this.scaleUp}>\n                <PlusOutlined />\n              </Button>\n              <Button onClick={this.scaleDown}>\n                <MinusOutlined />\n              </Button>\n            </Row>\n            <Row style={{ height: 0.85 * window.innerHeight }}>\n              <div\n                ref={(mount) => {\n                  this.mount = mount;\n                }}\n              ></div>\n            </Row>\n            <Row style={{ height: 0.05 * window.innerHeight }}>\n              <Space direction='horizontal'>\n                <Typography.Text style={{ color: 'red' }}>\n                  x: {this.state.point.x ? this.state.point.x.toFixed(4) : 0}\n                </Typography.Text>\n                <Typography.Text style={{ color: 'lime' }}>\n                  y: {this.state.point.y ? this.state.point.y.toFixed(4) : 0}\n                </Typography.Text>\n                <Typography.Text style={{ color: 'blue' }}>\n                  z: {this.state.point.z ? this.state.point.z.toFixed(4) : 0}\n                </Typography.Text>\n              </Space>\n            </Row>\n          </Col>\n          <Col flex={5}>\n            {this.state.impostazioniJson && (\n              <Row>\n                <Space direction='horizontal'>\n                  <Typography.Text style={{ color: 'white', fontSize: '2em' }}>\n                    Nuvola:\n                  </Typography.Text>\n                  <Select\n                    defaultValue={this.state.frame}\n                    style={{ width: 120 }}\n                    onChange={this.onFrameUpdate}\n                  >\n                    {this.state.impostazioniJson.filenames.map((fid, i) => (\n                      <Option key={i} value={fid}>\n                        {fid}\n                      </Option>\n                    ))}\n                  </Select>\n                </Space>\n              </Row>\n            )}\n            {/* <Row>lista infopoints</Row> */}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Annotator;\n","import React from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Button } from 'antd';\n\nclass ButtonExample extends React.Component {\n  state = {\n    displayColorPicker: false,\n    background: '#fff',\n  };\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  handleChange = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n  handleChangeComplete = (color) => {\n    this.props.changeColor(color.hex);\n    this.setState({ background: color.hex });\n  };\n\n  render() {\n    const popover = {\n      position: 'absolute',\n      zIndex: '2',\n    };\n    const cover = {\n      position: 'fixed',\n      top: '0px',\n      right: '0px',\n      bottom: '0px',\n      left: '0px',\n    };\n    return (\n      <div>\n        <Button\n          style={{\n            backgroundColor: this.state.background,\n          }}\n          onClick={this.handleClick}\n        >\n          {!this.state.displayColorPicker && 'Apri '}\n          {this.state.displayColorPicker && 'Chiudi '}\n          ColorPicker\n        </Button>\n        {this.state.displayColorPicker ? (\n          <div style={popover}>\n            <div style={cover} onClick={this.handleClose} />\n            <ChromePicker\n              color={this.state.background}\n              onChange={this.handleChange}\n              onChangeComplete={this.handleChangeComplete}\n            />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default ButtonExample;\n","import React from 'react';\nimport { Modal, Form, Input, Button } from 'antd';\nimport ColorPicker from './ColorPicker';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nclass App extends React.Component {\n  formRef = React.createRef();\n\n  changeColor = (value) => {\n    this.formRef.current.setFieldsValue({\n      colore: value,\n    });\n  };\n\n  onFinish = (values) => {\n    this.props.handleOk(values);\n  };\n\n  onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render() {\n    return (\n      <div onMouseMove={(e) => e.stopPropagation()}>\n        <Modal\n          title='Basic Modal'\n          visible={this.props.visible}\n          footer={null}\n          // onOk={this.props.handleOk}\n          onCancel={this.props.handleCancel}\n        >\n          {this.props.visible && (\n            <>\n              <p>x: {this.props.point.x.toString().substring(0, 5)}</p>\n              <Form\n                {...layout}\n                name='basic'\n                initialValues={{ remember: true }}\n                ref={this.formRef}\n                onFinish={this.onFinish}\n                onFinishFailed={this.onFinishFailed}\n              >\n                <Form.Item\n                  label='Titolo*'\n                  name='titolo'\n                  rules={[{ required: true, message: 'Campo obbligatorio!' }]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item label='Colore' name='colore'>\n                  <ColorPicker changeColor={this.changeColor}></ColorPicker>\n                </Form.Item>\n\n                <Form.Item label='Descrizione' name='descrizione'>\n                  <Input.TextArea />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                  <Button type='primary' htmlType='submit'>\n                    Aggiungi\n                  </Button>\n                </Form.Item>\n              </Form>\n            </>\n          )}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './main.css';\n\nimport SinglePageApp from './components/Annotator';\n\nReactDOM.render(<SinglePageApp />, document.getElementById('root'));\n"],"sourceRoot":""}