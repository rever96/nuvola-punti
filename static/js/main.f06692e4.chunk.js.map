{"version":3,"sources":["services/PointService.js","components/Visualizator.js","index.js"],"names":["PointService","loadPoints","filename","infoPoints","Promise","resolve","reject","fetch","configs","infopoints_folder","catch","err","then","response","json","data","savePoints","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","addInfoPoint","info","point","infopoint","descrizione","colore","titolo","myInstance","this","camera","controls","scene","renderer","pointcloud","pointService","getInstance","raycaster","THREE","params","Points","threshold","mouse","sphereKps","selected_fid","frameFolder","prevTime","divStyle","position","display","left","top","Visualizzator","props","init","width","innerWidth","height","innerHeight","background","antialias","setPixelRatio","devicePixelRatio","setSize","dofAutofocus","mount","domElement","up","set","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","addPointcloud","addSphereInfo","onDocumentMouseClick","event","preventDefault","x","clientX","clientWidth","y","clientY","clientHeight","setFromCamera","infoPoint","intersectObjects","children","find","i","object","b","setState","movePoint","moveVector","Vector3","z","onDocumentMouseDown","e","onDocumentMouseOver","o","state","activeInfoPoint","PCDLoader","load","points","material","size","add","r","geometry","boundingSphere","radius","xhr","loaded","round","total","removePointcloud","remove","removeSphereKps","forEach","pair","getObjectByProperty","uuid","dispose","renderLists","console","log","infopoints","Object","keys","dist","distanceTo","sphereKpGeometry","sphereKpMaterial","color","sphereKp","copy","push","animate","reDrawInfoPoint","requestAnimationFrame","update","updateMatrixWorld","time","performance","now","delta","lookAt","render","onWindowResize","aspect","updateProjectionMatrix","scaleDown","getObjectByName","needsUpdate","scaleUp","onFrameUpdate","addEventListener","removeEventListener","title","style","ref","Component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f06692e4.chunk.js","sourcesContent":["import configs from '../configs.json';\n\nclass PointService {\n  static myInstance = null;\n  static getInstance() {\n    if (PointService.myInstance == null) {\n      PointService.myInstance = new PointService();\n    }\n    return this.myInstance;\n  }\n\n  loadPoints = (filename) => {\n    delete this.infoPoints;\n    this.infoPoints = {};\n\n    return new Promise((resolve, reject) => {\n      fetch(configs.infopoints_folder + '/' + filename + '.json')\n        .catch((err) => reject(err))\n        .then((response) => response.json())\n        .then((data) => {\n          this.infoPoints = data;\n          resolve(this.infoPoints);\n        });\n    });\n  };\n\n  savePoints = (filename) => {\n    if (!this.infoPoints) {\n      return;\n    }\n    let contentType = 'application/json;charset=utf-8;';\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob(\n        [decodeURIComponent(encodeURI(JSON.stringify(this.infoPoints)))],\n        { type: contentType }\n      );\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement('a');\n      a.download = filename;\n      a.href =\n        'data:' +\n        contentType +\n        ',' +\n        encodeURIComponent(JSON.stringify(this.infoPoints));\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  // infoPoints\n  addInfoPoint = (info, point) => {\n    const infopoint = {\n      descrizione: info.descrizione,\n      colore: info.colore || '#ffffff',\n      point,\n    };\n    this.infoPoints[info.titolo] = infopoint;\n    return infopoint;\n  };\n}\n\nexport default PointService;\n","import React, { Component } from 'react';\n\nimport * as THREE from 'three';\nimport { PCDLoader } from 'three/examples/jsm/loaders/PCDLoader.js';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport configs from '../configs.json';\n\nimport PointService from '../services/PointService';\n\nimport { Card } from 'antd';\nimport { Vector3 } from 'three';\n\nlet pointService = PointService.getInstance();\n\nvar camera, controls, scene, renderer, loader, pointcloud;\n\nvar raycaster = new THREE.Raycaster();\nraycaster.params.Points.threshold = 0.01;\nvar mouse = new THREE.Vector2();\n\nvar sphereKps = []; // array of {uuid, titolo}\n\nconst fids = configs['filenames'];\nlet selected_fid = fids[1];\n\nconst frameFolder = configs['pcd_folder'] + '/';\n\nlet prevTime = 0;\nvar divStyle = {\n  position: 'absolute',\n  display: 'none',\n  left: '0px',\n  top: '0px',\n};\n\nclass Visualizzator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: 0,\n      activeInfoPoint: null,\n      movePoint: null,\n      moveVector: null,\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n    window.addEventListener('resize', this.onWindowResize, false);\n    window.addEventListener('click', this.onDocumentMouseClick, false);\n    window.addEventListener('mousemove', this.onDocumentMouseOver, false);\n    window.addEventListener('mousedown', this.onDocumentMouseDown, false);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize');\n    window.removeEventListener('mousemove');\n    window.removeEventListener('mousedown');\n    window.removeEventListener('click');\n  }\n\n  init = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x606060);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n    renderer.dofAutofocus = true;\n    this.mount.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(65, width / height, 1, 1000);\n    camera.up.set(0, 1, 0);\n\n    controls = new MapControls(camera, renderer.domElement);\n\n    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n\n    controls.enableDamping = false; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 1;\n    controls.maxDistance = 500;\n    controls.maxPolarAngle = 0.5 * Math.PI;\n\n    //carico gli oggetti da file\n    this.addPointcloud();\n    this.addSphereInfo();\n  };\n\n  onDocumentMouseClick = (event) => {\n    event.preventDefault();\n    mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(scene.children);\n    const infoPoint = intersects.find((i) => i && i.object && i.object.info);\n    if (infoPoint) {\n      const a = camera.position;\n      const b = infoPoint.point;\n      this.setState({\n        movePoint: infoPoint.point,\n        moveVector: new Vector3(b.x - a.x, b.y - a.y, b.z - a.z),\n      });\n    }\n  };\n\n  onDocumentMouseDown = (e) => {\n    this.setState({\n      movePoint: null,\n    });\n  };\n\n  onDocumentMouseOver = (event) => {\n    event.preventDefault();\n    mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(scene.children);\n    let o = intersects.find((i) => i && i.object && i.object.info);\n    if (o) {\n      o = o.object;\n      if (!this.state.activeInfoPoint) {\n        divStyle = {\n          position: 'absolute',\n          left: event.clientX,\n          top: event.clientY,\n        };\n        this.setState({\n          activeInfoPoint: o.info,\n        });\n      }\n    } else {\n      this.setState({\n        activeInfoPoint: null,\n      });\n    }\n  };\n\n  addPointcloud = () => {\n    pointcloud = new THREE.Points(new THREE.Geometry(), new THREE.Material());\n    loader = new PCDLoader();\n    loader.load(\n      frameFolder + '/' + selected_fid + '.pcd',\n      (points) => {\n        pointcloud = points;\n        // if (points.material.color.r !== 1) {\n        //   points.material.color.setHex(0x000000);\n        // }\n        points.material.size = 0.02;\n        scene.add(pointcloud);\n        const r = pointcloud.geometry.boundingSphere.radius;\n        camera.position.set(r * 1.5, r * 0.5, r * 1.5);\n      },\n      (xhr) => {\n        this.setState({\n          loaded: Math.round((xhr.loaded / xhr.total) * 100),\n        });\n      }\n    );\n  };\n\n  removePointcloud = () => {\n    scene.remove(pointcloud);\n  };\n\n  removeSphereKps = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      object.geometry.dispose();\n      object.material.dispose();\n      scene.remove(object);\n    });\n    renderer.renderLists.dispose();\n    sphereKps = [];\n  };\n  addSphereInfo = () => {\n    pointService\n      .loadPoints(selected_fid)\n      .catch((err) => {\n        console.log(err);\n      })\n      .then((infopoints) => {\n        Object.keys(infopoints).forEach((titolo) => {\n          const dist = camera.position.distanceTo(infopoints[titolo].point);\n          const sphereKpGeometry = new THREE.SphereBufferGeometry(\n            dist / 32,\n            32,\n            32\n          );\n          const sphereKpMaterial = new THREE.MeshBasicMaterial({\n            color: infopoints[titolo].colore,\n          });\n          const sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n          sphereKp.position.copy(infopoints[titolo].point);\n          sphereKps.push({\n            uuid: sphereKp.uuid,\n            titolo: titolo,\n          });\n          sphereKp.info = {\n            titolo,\n            descrizione: infopoints[titolo].descrizione,\n          };\n          scene.add(sphereKp);\n        });\n      });\n  };\n  animate = () => {\n    this.reDrawInfoPoint();\n\n    requestAnimationFrame(this.animate);\n    controls.update();\n    camera.updateMatrixWorld();\n\n    var time = performance.now();\n\n    if (this.state.moveVector) {\n      var delta = (time - prevTime) / 1000;\n      camera.position.x += this.state.moveVector.x * delta;\n      camera.position.y += this.state.moveVector.y * delta;\n      camera.position.z += this.state.moveVector.z * delta;\n      if (camera.position.distanceTo(this.state.movePoint) < 4) {\n        this.setState({\n          moveVector: null,\n        });\n      }\n    }\n    prevTime = time;\n\n    if (this.state.movePoint) {\n      camera.lookAt(this.state.movePoint);\n    }\n\n    renderer.render(scene, camera);\n  };\n\n  reDrawInfoPoint = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      const dist = camera.position.distanceTo(object.position);\n      const sphereKpGeometry = new THREE.SphereBufferGeometry(\n        dist / 32,\n        32,\n        32\n      );\n      object.geometry = sphereKpGeometry;\n    });\n  };\n\n  onWindowResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  scaleDown = () => {\n    var points = scene.getObjectByName(selected_fid + '.pcd');\n    points.material.size *= 0.8;\n    points.material.needsUpdate = true;\n  };\n  scaleUp = () => {\n    var points = scene.getObjectByName(selected_fid + '.pcd');\n    points.material.size *= 1.2;\n    points.material.needsUpdate = true;\n  };\n\n  onFrameUpdate = (e) => {\n    if (e === selected_fid) {\n      return;\n    }\n    selected_fid = e;\n    this.removeSphereKps();\n    this.removePointcloud();\n    this.addPointcloud();\n    this.addSphereInfo();\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.activeInfoPoint && (\n          <Card\n            size='small'\n            title={this.state.activeInfoPoint.titolo}\n            style={divStyle}\n          >\n            <p>{this.state.activeInfoPoint.descrizione}</p>\n          </Card>\n        )}\n\n        <div\n          style={{ width: window.innerWidth, height: window.innerHeight }}\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        ></div>\n      </>\n    );\n  }\n}\n\nexport default Visualizzator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './main.css';\n\nimport SinglePageApp from './components/Visualizator';\n\nReactDOM.render(<SinglePageApp />, document.getElementById('root'));\n"],"sourceRoot":""}