{"version":3,"sources":["services/PointService.js","components/Annotator.js","components/ColorPicker.js","components/addInfoPoint.js","index.js"],"names":["PointService","loadPoints","filename","infoPoints","Promise","resolve","reject","fetch","configs","infopoints_folder","catch","err","then","response","json","data","savePoints","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","addInfoPoint","info","point","infopoint","descrizione","colore","titolo","myInstance","this","camera","controls","scene","renderer","pointcloud","ButtonExample","state","displayColorPicker","background","handleClick","setState","handleClose","handleChange","color","hex","handleChangeComplete","props","changeColor","style","backgroundColor","onClick","position","zIndex","top","right","bottom","left","onChange","onChangeComplete","React","Component","layout","labelCol","span","wrapperCol","tailLayout","offset","App","formRef","createRef","value","current","setFieldsValue","onFinish","values","handleOk","onFinishFailed","errorInfo","console","log","onMouseMove","e","stopPropagation","title","visible","footer","onCancel","handleCancel","x","toString","substring","name","initialValues","remember","ref","Item","label","rules","required","message","ColorPicker","TextArea","htmlType","Option","Select","pointService","getInstance","raycaster","THREE","params","Points","threshold","pointclouds","mouse","clock","toggle","sphereKps","sphereGeometry","sphereMaterial","sphere","scale","set","fids","selected_fid","frameFolder","Annotator","init","$","hide","width","innerWidth","height","innerHeight","antialias","setPixelRatio","devicePixelRatio","setSize","dofAutofocus","mount","domElement","up","intrinsic","cameraMatrix2npString","projectionMatrix","extrinsic","matrixWorldInverse","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","addPointcloud","addSphereInfo","axesHelper","add","addEventListener","onWindowResize","onMouseClick","cameraMatrix","npString","i","j","pos","elements","toFixed","PCDLoader","load","points","r","geometry","boundingSphere","radius","xhr","loaded","round","total","removePointcloud","remove","removeSphereKps","forEach","pair","object","getObjectByProperty","uuid","dispose","material","renderLists","infopoints","Object","keys","dist","distanceTo","sphereKpGeometry","sphereKpMaterial","sphereKp","copy","push","animate","requestAnimationFrame","update","renderScene","updateMatrixWorld","setFromCamera","intersections","intersectObjects","intersection","length","getDelta","render","preventDefault","clientX","clientWidth","y","clientY","clientHeight","shiftKey","showModal","aspect","updateProjectionMatrix","scaleDown","getObjectByName","size","needsUpdate","scaleUp","onFrameUpdate","selectedPoint","ip","found","removeEventListener","PlusOutlined","MinusOutlined","direction","Text","z","flex","fontSize","defaultValue","map","fid","key","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c983e1fc.chunk.js","sourcesContent":["import configs from '../configs.json';\n\nclass PointService {\n  static myInstance = null;\n  static getInstance() {\n    if (PointService.myInstance == null) {\n      PointService.myInstance = new PointService();\n    }\n    return this.myInstance;\n  }\n\n  loadPoints = (filename) => {\n    delete this.infoPoints;\n    this.infoPoints = {};\n\n    return new Promise((resolve, reject) => {\n      fetch(configs.infopoints_folder + '/' + filename + '.json')\n        .catch((err) => reject(err))\n        .then((response) => response.json())\n        .then((data) => {\n          this.infoPoints = data;\n          resolve(this.infoPoints);\n        });\n    });\n  };\n\n  savePoints = (filename) => {\n    if (!this.infoPoints) {\n      return;\n    }\n    let contentType = 'application/json;charset=utf-8;';\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob(\n        [decodeURIComponent(encodeURI(JSON.stringify(this.infoPoints)))],\n        { type: contentType }\n      );\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement('a');\n      a.download = filename;\n      a.href =\n        'data:' +\n        contentType +\n        ',' +\n        encodeURIComponent(JSON.stringify(this.infoPoints));\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  // infoPoints\n  addInfoPoint = (info, point) => {\n    const infopoint = {\n      descrizione: info.descrizione,\n      colore: info.colore || '#ffffff',\n      point,\n    };\n    this.infoPoints[info.titolo] = infopoint;\n    return infopoint;\n  };\n}\n\nexport default PointService;\n","import React, { Component } from 'react';\n\nimport * as THREE from 'three';\nimport { PCDLoader } from 'three/examples/jsm/loaders/PCDLoader.js';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport $ from 'jquery';\n\nimport configs from '../configs.json';\n\nimport PointService from '../services/PointService';\n\nimport AddInfoPoint from './addInfoPoint';\n\nimport { Row, Col, Button, Select, Typography, Space } from 'antd';\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons';\n\nconst { Option } = Select;\n\nlet pointService = PointService.getInstance();\n\nvar camera, controls, scene, renderer, loader, pointcloud;\n\nvar raycaster = new THREE.Raycaster();\nraycaster.params.Points.threshold = 0.01;\nvar mouse = new THREE.Vector2();\n\nvar pointclouds;\n\nvar clock = new THREE.Clock();\nvar toggle = 0;\n\nvar sphereKps = []; // array of {uuid, titolo}\n\nvar sphereGeometry = new THREE.SphereBufferGeometry(0.04, 32, 32);\nvar sphereMaterial = new THREE.MeshBasicMaterial({ color: '#FF0000' });\nvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\nsphere.scale.set(1, 1, 1);\n\nconst fids = configs['filenames'];\nlet selected_fid = fids[0];\n\nconst frameFolder = configs['pcd_folder'] + '/';\n\nclass Annotator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showModal: false,\n      loaded: 0,\n      intrinsic: 0,\n      extrinsic: 0,\n      point: [],\n      selectedPoint: [],\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize');\n    window.removeEventListener('mousemove');\n    window.removeEventListener('click');\n  }\n\n  init = () => {\n    $('.alert-success').hide();\n\n    const width = 0.75 * window.innerWidth;\n    const height = 0.85 * window.innerHeight;\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x008000);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n    renderer.dofAutofocus = true;\n    this.mount.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(65, width / height, 1, 1000);\n    // camera = new THREE.OrthographicCamera( 5, -5, 3, 0, 1, 1000 );\n    camera.position.set(8, 4, 8);\n    camera.up.set(0, 1, 0);\n\n    this.setState({\n      intrinsic: this.cameraMatrix2npString(camera.projectionMatrix),\n      extrinsic: this.cameraMatrix2npString(camera.matrixWorldInverse),\n    });\n\n    // controls\n\n    controls = new MapControls(camera, renderer.domElement);\n\n    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n\n    controls.enableDamping = false; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.05;\n\n    controls.screenSpacePanning = false;\n\n    controls.minDistance = 1;\n    controls.maxDistance = 500;\n\n    controls.maxPolarAngle = 2 * Math.PI;\n\n    // point cloud\n    this.addPointcloud();\n    this.addSphereInfo();\n\n    // axis\n    var axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    // sphere\n    scene.add(sphere);\n\n    window.addEventListener('resize', this.onWindowResize, false);\n\n    window.addEventListener('mousemove', this.onMouseMove, false);\n\n    window.addEventListener('click', this.onMouseClick, false);\n  };\n\n  cameraMatrix2npString = (cameraMatrix) => {\n    var npString = 'np.array([';\n    for (var i = 0; i < 4; i++) {\n      npString += '[';\n      for (var j = 0; j < 4; j++) {\n        var pos = i * 4 + j;\n        npString +=\n          cameraMatrix.elements[pos] === 0\n            ? cameraMatrix.elements[pos]\n            : cameraMatrix.elements[pos].toFixed(4);\n        if (j !== 3) {\n          npString += ', ';\n        }\n      }\n      npString += ']';\n      if (i !== 3) {\n        npString += ', ';\n      }\n    }\n    npString += '])';\n    return npString;\n  };\n\n  addPointcloud = () => {\n    pointcloud = new THREE.Points(new THREE.Geometry(), new THREE.Material());\n    loader = new PCDLoader();\n    loader.load(\n      frameFolder + '/' + selected_fid + '.pcd',\n      (points) => {\n        pointcloud = points;\n        // if (points.material.color.r !== 1) {\n        //   points.material.color.setHex(0x000000);\n        // }\n        // points.material.size = 0.02;\n        scene.add(pointcloud);\n        pointclouds = [pointcloud];\n        const r = pointcloud.geometry.boundingSphere.radius;\n        camera.position.set(r * 1.5, r * 0.5, r * 1.5);\n      },\n      (xhr) => {\n        this.setState({\n          loaded: Math.round((xhr.loaded / xhr.total) * 100),\n        });\n      }\n    );\n  };\n\n  removePointcloud = () => {\n    scene.remove(pointcloud);\n  };\n\n  removeSphereKps = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      object.geometry.dispose();\n      object.material.dispose();\n      scene.remove(object);\n    });\n    renderer.renderLists.dispose();\n    sphereKps = [];\n  };\n\n  addSphereInfo = () => {\n    pointService\n      .loadPoints(selected_fid)\n      .catch((err) => {\n        console.log(err);\n      })\n      .then((infopoints) => {\n        console.log(infopoints);\n        Object.keys(infopoints).forEach((titolo) => {\n          const dist = camera.position.distanceTo(infopoints[titolo].point);\n          console.log(dist);\n          const sphereKpGeometry = new THREE.SphereBufferGeometry(\n            dist / 32,\n            32,\n            32\n          );\n          const sphereKpMaterial = new THREE.MeshBasicMaterial({\n            color: infopoints[titolo].colore,\n          });\n          const sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n          sphereKp.position.copy(infopoints[titolo].point);\n          sphereKps.push({\n            uuid: sphereKp.uuid,\n            titolo: titolo,\n          });\n          scene.add(sphereKp);\n        });\n      });\n  };\n\n  animate = () => {\n    this.setState({\n      intrinsic: this.cameraMatrix2npString(camera.projectionMatrix),\n      extrinsic: this.cameraMatrix2npString(camera.matrixWorldInverse),\n    });\n    requestAnimationFrame(this.animate);\n    controls.update();\n    this.renderScene();\n  };\n\n  renderScene = () => {\n    camera.updateMatrixWorld();\n\n    // update the picking ray with the camera and mouse position\n    raycaster.setFromCamera(mouse, camera);\n\n    // calculate objects intersecting the picking ray\n    if (typeof pointclouds !== 'undefined') {\n      var intersections = raycaster.intersectObjects(pointclouds);\n      var intersection = intersections.length > 0 ? intersections[0] : null;\n      if (toggle > 0.02 && intersection != null) {\n        this.setState({\n          point: intersection.point,\n        });\n        sphere.position.copy(intersection.point);\n        toggle = 0;\n      }\n    }\n\n    toggle += clock.getDelta();\n\n    renderer.render(scene, camera);\n  };\n\n  onMouseMove = (e) => {\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    e.preventDefault();\n    mouse.x = (e.clientX / this.mount.clientWidth) * 2 - 1;\n    mouse.y =\n      -((e.clientY - 0.1 * window.innerHeight) / this.mount.clientHeight) * 2 +\n      1;\n  };\n\n  onMouseClick = (e) => {\n    if (e.shiftKey && this.state.point.x) {\n      this.showModal(this.state.point);\n    }\n  };\n\n  onWindowResize = () => {\n    camera.aspect = (0.75 * window.innerWidth) / (0.85 * window.innerHeight);\n    camera.updateProjectionMatrix();\n    renderer.setSize(0.75 * window.innerWidth, 0.85 * window.innerHeight);\n  };\n\n  scaleDown = () => {\n    var points = scene.getObjectByName(selected_fid + '.pcd');\n    points.material.size *= 0.8;\n    points.material.needsUpdate = true;\n  };\n  scaleUp = () => {\n    var points = scene.getObjectByName(selected_fid + '.pcd');\n    points.material.size *= 1.2;\n    points.material.needsUpdate = true;\n  };\n\n  onFrameUpdate = (e) => {\n    if (e == selected_fid) {\n      return;\n    }\n    selected_fid = e;\n    this.removeSphereKps();\n    this.removePointcloud();\n    this.addPointcloud();\n    this.addSphereInfo();\n  };\n\n  //////// infopoint tool ///////\n  showModal = (point) => {\n    this.setState({\n      showModal: true,\n      selectedPoint: point,\n    });\n  };\n\n  // aggiungo un infopoint\n  handleOk = (e) => {\n    console.log(e);\n\n    const ip = pointService.addInfoPoint(e, this.state.selectedPoint);\n\n    var found = false;\n    var sphereKp;\n    for (const pair of sphereKps) {\n      console.log(pair);\n      if (pair.titolo === e.titolo) {\n        sphereKp = scene.getObjectByProperty('uuid', pair.uuid);\n        sphereKp.position.copy(this.state.point);\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      var sphereKpGeometry = new THREE.SphereBufferGeometry(0.04, 32, 32);\n      var sphereKpMaterial = new THREE.MeshBasicMaterial({\n        color: ip.colore,\n      });\n      sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n      sphereKp.position.copy(ip.point);\n      sphereKps.push({\n        uuid: sphereKp.uuid,\n        titolo: e.titolo,\n      });\n      scene.add(sphereKp);\n    }\n\n    this.setState({\n      showModal: false,\n    });\n  };\n\n  handleCancel = (e) => {\n    this.setState({\n      showModal: false,\n    });\n  };\n  /////////////////\n\n  render() {\n    return (\n      <div>\n        <AddInfoPoint\n          handleCancel={this.handleCancel}\n          handleOk={this.handleOk}\n          visible={this.state.showModal}\n          point={this.state.selectedPoint}\n        ></AddInfoPoint>\n        <Row\n          style={{\n            height: '100vh',\n            width: '100vw',\n            backgroundColor: '#404040',\n          }}\n        >\n          <Col style={{ width: 0.75 * window.innerWidth }}>\n            <Row style={{ height: 0.1 * window.innerHeight }}>\n              <Button onClick={() => pointService.savePoints(selected_fid)}>\n                Salva InfoPoint\n              </Button>\n              <Button onClick={this.scaleUp}>\n                <PlusOutlined />\n              </Button>\n              <Button onClick={this.scaleDown}>\n                <MinusOutlined />\n              </Button>\n            </Row>\n            <Row style={{ height: 0.85 * window.innerHeight }}>\n              <div\n                ref={(mount) => {\n                  this.mount = mount;\n                }}\n              ></div>\n            </Row>\n            <Row style={{ height: 0.05 * window.innerHeight }}>\n              <Space direction='horizontal'>\n                <Typography.Text style={{ color: 'red' }}>\n                  x: {this.state.point.x ? this.state.point.x.toFixed(4) : 0}\n                </Typography.Text>\n                <Typography.Text style={{ color: 'lime' }}>\n                  y: {this.state.point.y ? this.state.point.y.toFixed(4) : 0}\n                </Typography.Text>\n                <Typography.Text style={{ color: 'blue' }}>\n                  z: {this.state.point.z ? this.state.point.z.toFixed(4) : 0}\n                </Typography.Text>\n              </Space>\n            </Row>\n          </Col>\n          <Col flex={5}>\n            <Row>\n              <Space direction='horizontal'>\n                <Typography.Text style={{ color: 'white', fontSize: '2em' }}>\n                  Nuvola:\n                </Typography.Text>\n                <Select\n                  defaultValue={selected_fid}\n                  style={{ width: 120 }}\n                  onChange={this.onFrameUpdate}\n                >\n                  {fids.map((fid, i) => (\n                    <Option key={i} value={fid}>\n                      {fid}\n                    </Option>\n                  ))}\n                </Select>\n              </Space>\n            </Row>\n            <Row>lista infopoints</Row>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Annotator;\n","import React from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Button } from 'antd';\n\nclass ButtonExample extends React.Component {\n  state = {\n    displayColorPicker: false,\n    background: '#fff',\n  };\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  handleChange = (color) => {\n    this.setState({ background: color.hex });\n  };\n\n  handleChangeComplete = (color) => {\n    this.props.changeColor(color.hex);\n    this.setState({ background: color.hex });\n  };\n\n  render() {\n    const popover = {\n      position: 'absolute',\n      zIndex: '2',\n    };\n    const cover = {\n      position: 'fixed',\n      top: '0px',\n      right: '0px',\n      bottom: '0px',\n      left: '0px',\n    };\n    return (\n      <div>\n        <Button\n          style={{\n            backgroundColor: this.state.background,\n          }}\n          onClick={this.handleClick}\n        >\n          {!this.state.displayColorPicker && 'Apri '}\n          {this.state.displayColorPicker && 'Chiudi '}\n          ColorPicker\n        </Button>\n        {this.state.displayColorPicker ? (\n          <div style={popover}>\n            <div style={cover} onClick={this.handleClose} />\n            <ChromePicker\n              color={this.state.background}\n              onChange={this.handleChange}\n              onChangeComplete={this.handleChangeComplete}\n            />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default ButtonExample;\n","import React from 'react';\nimport { Modal, Form, Input, Button } from 'antd';\nimport ColorPicker from './ColorPicker';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nclass App extends React.Component {\n  formRef = React.createRef();\n\n  changeColor = (value) => {\n    this.formRef.current.setFieldsValue({\n      colore: value,\n    });\n  };\n\n  onFinish = (values) => {\n    this.props.handleOk(values);\n  };\n\n  onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render() {\n    return (\n      <div onMouseMove={(e) => e.stopPropagation()}>\n        <Modal\n          title='Basic Modal'\n          visible={this.props.visible}\n          footer={null}\n          // onOk={this.props.handleOk}\n          onCancel={this.props.handleCancel}\n        >\n          {this.props.visible && (\n            <>\n              <p>x: {this.props.point.x.toString().substring(0, 5)}</p>\n              <Form\n                {...layout}\n                name='basic'\n                initialValues={{ remember: true }}\n                ref={this.formRef}\n                onFinish={this.onFinish}\n                onFinishFailed={this.onFinishFailed}\n              >\n                <Form.Item\n                  label='Titolo*'\n                  name='titolo'\n                  rules={[{ required: true, message: 'Campo obbligatorio!' }]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item label='Colore' name='colore'>\n                  <ColorPicker changeColor={this.changeColor}></ColorPicker>\n                </Form.Item>\n\n                <Form.Item label='Descrizione' name='descrizione'>\n                  <Input.TextArea />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                  <Button type='primary' htmlType='submit'>\n                    Aggiungi\n                  </Button>\n                </Form.Item>\n              </Form>\n            </>\n          )}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './main.css';\n\nimport SinglePageApp from './components/Annotator';\n\nReactDOM.render(<SinglePageApp />, document.getElementById('root'));\n"],"sourceRoot":""}