{"version":3,"sources":["services/PointService.js","components/Visualizator.js","index.js"],"names":["PointService","loadPoints","filename","infoPoints","Promise","resolve","reject","fetch","process","catch","err","then","response","json","data","console","log","savePoints","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","addInfoPoint","info","point","infopoint","descrizione","colore","titolo","myInstance","this","camera","controls","scene","renderer","pointcloud","pointService","getInstance","raycaster","THREE","params","Points","threshold","mouse","sphereKps","prevTime","divStyle","position","display","left","top","Visualizzator","props","init","width","innerWidth","height","innerHeight","background","antialias","setPixelRatio","devicePixelRatio","setSize","dofAutofocus","mount","domElement","up","set","MapControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","addPointcloud","addSphereInfo","onDocumentMouseClick","event","preventDefault","x","clientX","clientWidth","y","clientY","clientHeight","setFromCamera","infoPoint","intersectObjects","children","find","i","object","b","setState","movePoint","moveVector","Vector3","z","onDocumentMouseDown","e","onDocumentMouseOver","o","state","activeInfoPoint","PCDLoader","load","impostazioniJson","visualizza","points","material","size","add","r","geometry","boundingSphere","radius","xhr","loaded","round","total","removePointcloud","remove","removeSphereKps","forEach","pair","getObjectByProperty","uuid","dispose","renderLists","infopoints","Object","keys","dist","distanceTo","sphereKpGeometry","sphereKpMaterial","color","sphereKp","copy","push","animate","reDrawInfoPoint","requestAnimationFrame","update","updateMatrixWorld","time","performance","now","delta","lookAt","render","onWindowResize","aspect","updateProjectionMatrix","headers","Accept","addEventListener","removeEventListener","title","style","ref","Component","ReactDOM","getElementById"],"mappings":"uPAAMA,E,4DASJC,WAAa,SAACC,GAIZ,cAHO,EAAKC,WACZ,EAAKA,WAAa,GAEX,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,MAAMC,mCAAiDN,EAAW,SAC/DO,OAAM,SAACC,GAAD,OAASJ,EAAOI,MACtBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKX,WAAaW,EAClBC,QAAQC,IAAI,EAAKb,YACjBE,EAAQ,EAAKF,mB,KAKrBc,WAAa,SAACf,GACZ,GAAK,EAAKC,WAAV,CAIA,GAAIe,OAAOC,WAAaD,OAAOC,UAAUC,iBAAkB,CACzD,IAAIC,EAAO,IAAIC,KACb,CAACC,mBAAmBC,UAAUC,KAAKC,UAAU,EAAKvB,eAClD,CAAEwB,KAJY,oCAMhBR,UAAUC,iBAAiBC,EAAMnB,OAC5B,CACL,IAAI0B,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,SAAW7B,EACb0B,EAAEI,KACA,wCAGAC,mBAAmBR,KAAKC,UAAU,EAAKvB,aACzCyB,EAAEM,OAAS,SACXL,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QACFR,SAASM,KAAKG,YAAYV,M,KAK9BW,aAAe,SAACC,EAAMC,GACpB,IAAMC,EAAY,CAChBC,YAAaH,EAAKG,YAClBC,OAAQJ,EAAKI,QAAU,UACvBH,SAGF,OADA,EAAKtC,WAAWqC,EAAKK,QAAUH,EACxBA,G,+DArDP,OAH+B,MAA3B1C,EAAa8C,aACf9C,EAAa8C,WAAa,IAAI9C,GAEzB+C,KAAKD,e,KANV9C,EACG8C,WAAa,KA8DP9C,IClDXgD,EAAQC,EAAUC,EAAOC,EAAkBC,EDkDhCpD,I,SCpDXqD,EAAerD,EAAasD,cAI5BC,EAAY,IAAIC,IACpBD,EAAUE,OAAOC,OAAOC,UAAY,IACpC,IAAIC,EAAQ,IAAIJ,IAEZK,EAAY,GAIZC,EAAW,EACXC,EAAW,CACbC,SAAU,WACVC,QAAS,OACTC,KAAM,MACNC,IAAK,OA6QQC,E,kDAzQb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwCRC,KAAO,WACL,IAAMC,EAAQrD,OAAOsD,WACfC,EAASvD,OAAOwD,aAEtBxB,EAAQ,IAAIM,KACNmB,WAAa,IAAInB,IAAY,UAEnCL,EAAW,IAAIK,IAAoB,CAAEoB,WAAW,KACvCC,cAAc3D,OAAO4D,kBAC9B3B,EAAS4B,QAAQR,EAAOE,GACxBtB,EAAS6B,cAAe,EACxB,EAAKC,MAAM7C,YAAYe,EAAS+B,aAEhClC,EAAS,IAAIQ,IAAwB,GAAIe,EAAQE,EAAQ,EAAG,MACrDU,GAAGC,IAAI,EAAG,EAAG,IAEpBnC,EAAW,IAAIoC,IAAYrC,EAAQG,EAAS+B,aAInCI,eAAgB,EACzBrC,EAASsC,cAAgB,IACzBtC,EAASuC,oBAAqB,EAC9BvC,EAASwC,YAAc,EACvBxC,EAASyC,YAAc,IACvBzC,EAAS0C,cAAgB,GAAMC,KAAKC,GAGpC,EAAKC,gBACL,EAAKC,iBAtEY,EAyEnBC,qBAAuB,SAACC,GACtBA,EAAMC,iBACNtC,EAAMuC,EAAKF,EAAMG,QAAUjD,EAAS+B,WAAWmB,YAAe,EAAI,EAClEzC,EAAM0C,GAAML,EAAMM,QAAUpD,EAAS+B,WAAWsB,aAAgB,EAAI,EACpEjD,EAAUkD,cAAc7C,EAAOZ,GAC/B,IACM0D,EADanD,EAAUoD,iBAAiBzD,EAAM0D,UACvBC,MAAK,SAACC,GAAD,OAAOA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOvE,QACnE,GAAIkE,EAAW,CACb,IAAM9E,EAAIoB,EAAOgB,SACXgD,EAAIN,EAAUjE,MACpB,EAAKwE,SAAS,CACZC,UAAWR,EAAUjE,MACrB0E,WAAY,IAAIC,IAAQJ,EAAEb,EAAIvE,EAAEuE,EAAGa,EAAEV,EAAI1E,EAAE0E,EAAGU,EAAEK,EAAIzF,EAAEyF,OArFzC,EA0FnBC,oBAAsB,SAACC,GACrB,EAAKN,SAAS,CACZC,UAAW,QA5FI,EAgGnBM,oBAAsB,SAACvB,GAErB,GADAA,EAAMC,iBACD/C,EAAL,CAGAS,EAAMuC,EAAKF,EAAMG,QAAUjD,EAAS+B,WAAWmB,YAAe,EAAI,EAClEzC,EAAM0C,GAAML,EAAMM,QAAUpD,EAAS+B,WAAWsB,aAAgB,EAAI,EACpEjD,EAAUkD,cAAc7C,EAAOZ,GAC/B,IACIyE,EADelE,EAAUoD,iBAAiBzD,EAAM0D,UACjCC,MAAK,SAACC,GAAD,OAAOA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOvE,QACrDiF,GACFA,EAAIA,EAAEV,OACD,EAAKW,MAAMC,kBACd5D,EAAW,CACTC,SAAU,WACVE,KAAM+B,EAAMG,QACZjC,IAAK8B,EAAMM,SAEb,EAAKU,SAAS,CACZU,gBAAiBF,EAAEjF,SAIvB,EAAKyE,SAAS,CACZU,gBAAiB,SAxHJ,EA6HnB7B,cAAgB,WACd1C,EAAa,IAAII,IAAa,IAAIA,IAAkB,IAAIA,MAC/C,IAAIoE,KACNC,KA3ISrH,oCA4IA,EAAKkH,MAAMI,iBAAiBC,WAAa,QACvD,SAACC,GACC5E,EAAa4E,EAIbA,EAAOC,SAASC,KAAO,IACvBhF,EAAMiF,IAAI/E,GACV,IAAMgF,EAAIhF,EAAWiF,SAASC,eAAeC,OAC7CvF,EAAOgB,SAASoB,IAAQ,IAAJgD,EAAa,GAAJA,EAAa,IAAJA,MAExC,SAACI,GACC,EAAKvB,SAAS,CACZwB,OAAQ7C,KAAK8C,MAAOF,EAAIC,OAASD,EAAIG,MAAS,WA9InC,EAoJnBC,iBAAmB,WACjB1F,EAAM2F,OAAOzF,IArJI,EAwJnB0F,gBAAkB,WAChBjF,EAAUkF,SAAQ,SAACC,GACjB,IAAMjC,EAAS7D,EAAM+F,oBAAoB,OAAQD,EAAKE,MACtDnC,EAAOsB,SAASc,UAChBpC,EAAOkB,SAASkB,UAChBjG,EAAM2F,OAAO9B,MAEf5D,EAASiG,YAAYD,UACrBtF,EAAY,IAhKK,EAkKnBkC,cAAgB,WACd1C,EACGpD,WAAW,EAAKyH,MAAMI,iBAAiBC,YACvCtH,OAAM,SAACC,GACNK,QAAQC,IAAIN,MAEbC,MAAK,SAAC0I,GACLC,OAAOC,KAAKF,GAAYN,SAAQ,SAAClG,GAC/B,IAAM2G,EAAOxG,EAAOgB,SAASyF,WAAWJ,EAAWxG,GAAQJ,OACrDiH,EAAmB,IAAIlG,IAC3BgG,EAAO,GACP,GACA,IAEIG,EAAmB,IAAInG,IAAwB,CACnDoG,MAAOP,EAAWxG,GAAQD,SAEtBiH,EAAW,IAAIrG,IAAWkG,EAAkBC,GAClDE,EAAS7F,SAAS8F,KAAKT,EAAWxG,GAAQJ,OAC1CoB,EAAUkG,KAAK,CACbb,KAAMW,EAASX,KACfrG,OAAQA,IAEVgH,EAASrH,KAAO,CACdK,SACAF,YAAa0G,EAAWxG,GAAQF,aAElCO,EAAMiF,IAAI0B,UA7LC,EAiMnBG,QAAU,WACR,EAAKC,kBAELC,sBAAsB,EAAKF,SAC3B/G,EAASkH,SACTnH,EAAOoH,oBAEP,IAAIC,EAAOC,YAAYC,MAEvB,GAAI,EAAK7C,MAAMP,WAAY,CACzB,IAAIqD,GAASH,EAAOvG,GAAY,IAChCd,EAAOgB,SAASmC,GAAK,EAAKuB,MAAMP,WAAWhB,EAAIqE,EAC/CxH,EAAOgB,SAASsC,GAAK,EAAKoB,MAAMP,WAAWb,EAAIkE,EAC/CxH,EAAOgB,SAASqD,GAAK,EAAKK,MAAMP,WAAWE,EAAImD,EAC3CxH,EAAOgB,SAASyF,WAAW,EAAK/B,MAAMR,WAAa,GACrD,EAAKD,SAAS,CACZE,WAAY,OAIlBrD,EAAWuG,EAEP,EAAK3C,MAAMR,WACblE,EAAOyH,OAAO,EAAK/C,MAAMR,WAG3B/D,EAASuH,OAAOxH,EAAOF,IA3NN,EA8NnBiH,gBAAkB,WAChBpG,EAAUkF,SAAQ,SAACC,GACjB,IAAMjC,EAAS7D,EAAM+F,oBAAoB,OAAQD,EAAKE,MAChDM,EAAOxG,EAAOgB,SAASyF,WAAW1C,EAAO/C,UACzC0F,EAAmB,IAAIlG,IAC3BgG,EAAO,GACP,GACA,IAEFzC,EAAOsB,SAAWqB,MAvOH,EA2OnBiB,eAAiB,WACf3H,EAAO4H,OAAS1J,OAAOsD,WAAatD,OAAOwD,YAC3C1B,EAAO6H,yBACP1H,EAAS4B,QAAQ7D,OAAOsD,WAAYtD,OAAOwD,cA3O3C,EAAKgD,MAAQ,CACXe,OAAQ,EACRd,gBAAiB,KACjBT,UAAW,KACXC,WAAY,KACZW,iBAAkB,MAGpBvH,MAAM,2BAA4B,CAChCuK,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAGTpK,MAAK,SAACyH,GAAD,OAAOA,EAAEvH,UACdF,MAAK,SAACmH,GACL,EAAKb,SAAS,CACZa,qBAEF,EAAKxD,OACL,EAAK0F,aAvBQ,E,gEA4BjB9I,OAAO8J,iBAAiB,SAAUjI,KAAK4H,gBAAgB,GACvDzJ,OAAO8J,iBAAiB,QAASjI,KAAKiD,sBAAsB,GAC5D9E,OAAO8J,iBAAiB,YAAajI,KAAKyE,qBAAqB,GAC/DtG,OAAO8J,iBAAiB,YAAajI,KAAKuE,qBAAqB,K,6CAI/DpG,OAAO+J,oBAAoB,UAC3B/J,OAAO+J,oBAAoB,aAC3B/J,OAAO+J,oBAAoB,aAC3B/J,OAAO+J,oBAAoB,W,+BA2MnB,IAAD,OACP,OACE,oCACGlI,KAAK2E,MAAMC,iBACV,kBAAC,IAAD,CACEO,KAAK,QACLgD,MAAOnI,KAAK2E,MAAMC,gBAAgB9E,OAClCsI,MAAOpH,GAEP,2BAAIhB,KAAK2E,MAAMC,gBAAgBhF,cAInC,yBACEwI,MAAO,CAAE5G,MAAOrD,OAAOsD,WAAYC,OAAQvD,OAAOwD,aAClD0G,IAAK,SAACnG,GACJ,EAAKA,MAAQA,U,GAlQGoG,aCxB5BC,IAASZ,OAAO,kBAAC,EAAD,MAAmB7I,SAAS0J,eAAe,U","file":"static/js/main.55e1bb44.chunk.js","sourcesContent":["class PointService {\n  static myInstance = null;\n  static getInstance() {\n    if (PointService.myInstance == null) {\n      PointService.myInstance = new PointService();\n    }\n    return this.myInstance;\n  }\n\n  loadPoints = (filename) => {\n    delete this.infoPoints;\n    this.infoPoints = {};\n\n    return new Promise((resolve, reject) => {\n      fetch(process.env.PUBLIC_URL + '/assets/infopoints/' + filename + '.json')\n        .catch((err) => reject(err))\n        .then((response) => response.json())\n        .then((data) => {\n          this.infoPoints = data;\n          console.log(this.infoPoints);\n          resolve(this.infoPoints);\n        });\n    });\n  };\n\n  savePoints = (filename) => {\n    if (!this.infoPoints) {\n      return;\n    }\n    let contentType = 'application/json;charset=utf-8;';\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob(\n        [decodeURIComponent(encodeURI(JSON.stringify(this.infoPoints)))],\n        { type: contentType }\n      );\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement('a');\n      a.download = filename;\n      a.href =\n        'data:' +\n        contentType +\n        ',' +\n        encodeURIComponent(JSON.stringify(this.infoPoints));\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  // infoPoints\n  addInfoPoint = (info, point) => {\n    const infopoint = {\n      descrizione: info.descrizione,\n      colore: info.colore || '#ffffff',\n      point,\n    };\n    this.infoPoints[info.titolo] = infopoint;\n    return infopoint;\n  };\n}\n\nexport default PointService;\n","import React, { Component } from 'react';\n\nimport * as THREE from 'three';\nimport { PCDLoader } from 'three/examples/jsm/loaders/PCDLoader.js';\nimport { MapControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nimport PointService from '../services/PointService';\n\nimport { Card } from 'antd';\nimport { Vector3 } from 'three';\n\nlet pointService = PointService.getInstance();\n\nvar camera, controls, scene, renderer, loader, pointcloud;\n\nvar raycaster = new THREE.Raycaster();\nraycaster.params.Points.threshold = 0.01;\nvar mouse = new THREE.Vector2();\n\nvar sphereKps = []; // array of {uuid, titolo}\n\nconst frameFolder = process.env.PUBLIC_URL + '/assets/pointclouds/';\n\nlet prevTime = 0;\nvar divStyle = {\n  position: 'absolute',\n  display: 'none',\n  left: '0px',\n  top: '0px',\n};\n\nclass Visualizzator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: 0,\n      activeInfoPoint: null,\n      movePoint: null,\n      moveVector: null,\n      impostazioniJson: null,\n    };\n\n    fetch('assets/impostazioni.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then((r) => r.json())\n      .then((impostazioniJson) => {\n        this.setState({\n          impostazioniJson,\n        });\n        this.init();\n        this.animate();\n      });\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.onWindowResize, false);\n    window.addEventListener('click', this.onDocumentMouseClick, false);\n    window.addEventListener('mousemove', this.onDocumentMouseOver, false);\n    window.addEventListener('mousedown', this.onDocumentMouseDown, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize');\n    window.removeEventListener('mousemove');\n    window.removeEventListener('mousedown');\n    window.removeEventListener('click');\n  }\n\n  init = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x606060);\n\n    renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n    renderer.dofAutofocus = true;\n    this.mount.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(65, width / height, 1, 1000);\n    camera.up.set(0, 1, 0);\n\n    controls = new MapControls(camera, renderer.domElement);\n\n    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)\n\n    controls.enableDamping = false; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 1;\n    controls.maxDistance = 500;\n    controls.maxPolarAngle = 0.5 * Math.PI;\n\n    //carico gli oggetti da file\n    this.addPointcloud();\n    this.addSphereInfo();\n  };\n\n  onDocumentMouseClick = (event) => {\n    event.preventDefault();\n    mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(scene.children);\n    const infoPoint = intersects.find((i) => i && i.object && i.object.info);\n    if (infoPoint) {\n      const a = camera.position;\n      const b = infoPoint.point;\n      this.setState({\n        movePoint: infoPoint.point,\n        moveVector: new Vector3(b.x - a.x, b.y - a.y, b.z - a.z),\n      });\n    }\n  };\n\n  onDocumentMouseDown = (e) => {\n    this.setState({\n      movePoint: null,\n    });\n  };\n\n  onDocumentMouseOver = (event) => {\n    event.preventDefault();\n    if (!renderer) {\n      return;\n    }\n    mouse.x = (event.clientX / renderer.domElement.clientWidth) * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(scene.children);\n    let o = intersects.find((i) => i && i.object && i.object.info);\n    if (o) {\n      o = o.object;\n      if (!this.state.activeInfoPoint) {\n        divStyle = {\n          position: 'absolute',\n          left: event.clientX,\n          top: event.clientY,\n        };\n        this.setState({\n          activeInfoPoint: o.info,\n        });\n      }\n    } else {\n      this.setState({\n        activeInfoPoint: null,\n      });\n    }\n  };\n\n  addPointcloud = () => {\n    pointcloud = new THREE.Points(new THREE.Geometry(), new THREE.Material());\n    loader = new PCDLoader();\n    loader.load(\n      frameFolder + this.state.impostazioniJson.visualizza + '.pcd',\n      (points) => {\n        pointcloud = points;\n        // if (points.material.color.r !== 1) {\n        //   points.material.color.setHex(0x000000);\n        // }\n        points.material.size = 0.02;\n        scene.add(pointcloud);\n        const r = pointcloud.geometry.boundingSphere.radius;\n        camera.position.set(r * 1.5, r * 0.5, r * 1.5);\n      },\n      (xhr) => {\n        this.setState({\n          loaded: Math.round((xhr.loaded / xhr.total) * 100),\n        });\n      }\n    );\n  };\n\n  removePointcloud = () => {\n    scene.remove(pointcloud);\n  };\n\n  removeSphereKps = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      object.geometry.dispose();\n      object.material.dispose();\n      scene.remove(object);\n    });\n    renderer.renderLists.dispose();\n    sphereKps = [];\n  };\n  addSphereInfo = () => {\n    pointService\n      .loadPoints(this.state.impostazioniJson.visualizza)\n      .catch((err) => {\n        console.log(err);\n      })\n      .then((infopoints) => {\n        Object.keys(infopoints).forEach((titolo) => {\n          const dist = camera.position.distanceTo(infopoints[titolo].point);\n          const sphereKpGeometry = new THREE.SphereBufferGeometry(\n            dist / 32,\n            32,\n            32\n          );\n          const sphereKpMaterial = new THREE.MeshBasicMaterial({\n            color: infopoints[titolo].colore,\n          });\n          const sphereKp = new THREE.Mesh(sphereKpGeometry, sphereKpMaterial);\n          sphereKp.position.copy(infopoints[titolo].point);\n          sphereKps.push({\n            uuid: sphereKp.uuid,\n            titolo: titolo,\n          });\n          sphereKp.info = {\n            titolo,\n            descrizione: infopoints[titolo].descrizione,\n          };\n          scene.add(sphereKp);\n        });\n      });\n  };\n  animate = () => {\n    this.reDrawInfoPoint();\n\n    requestAnimationFrame(this.animate);\n    controls.update();\n    camera.updateMatrixWorld();\n\n    var time = performance.now();\n\n    if (this.state.moveVector) {\n      var delta = (time - prevTime) / 1000;\n      camera.position.x += this.state.moveVector.x * delta;\n      camera.position.y += this.state.moveVector.y * delta;\n      camera.position.z += this.state.moveVector.z * delta;\n      if (camera.position.distanceTo(this.state.movePoint) < 4) {\n        this.setState({\n          moveVector: null,\n        });\n      }\n    }\n    prevTime = time;\n\n    if (this.state.movePoint) {\n      camera.lookAt(this.state.movePoint);\n    }\n\n    renderer.render(scene, camera);\n  };\n\n  reDrawInfoPoint = () => {\n    sphereKps.forEach((pair) => {\n      const object = scene.getObjectByProperty('uuid', pair.uuid);\n      const dist = camera.position.distanceTo(object.position);\n      const sphereKpGeometry = new THREE.SphereBufferGeometry(\n        dist / 32,\n        32,\n        32\n      );\n      object.geometry = sphereKpGeometry;\n    });\n  };\n\n  onWindowResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.activeInfoPoint && (\n          <Card\n            size='small'\n            title={this.state.activeInfoPoint.titolo}\n            style={divStyle}\n          >\n            <p>{this.state.activeInfoPoint.descrizione}</p>\n          </Card>\n        )}\n\n        <div\n          style={{ width: window.innerWidth, height: window.innerHeight }}\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        ></div>\n      </>\n    );\n  }\n}\n\nexport default Visualizzator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './main.css';\n\nimport SinglePageApp from './components/Visualizator';\n\nReactDOM.render(<SinglePageApp />, document.getElementById('root'));\n"],"sourceRoot":""}